{"version":3,"file":"app~7bd12dde.bundle.js","mappings":";iYACA,irOAeA,QAdgB,yBADhB,4FACgB,SADhB,QAMG,EALa,EAWb,OAZH,EACgB,OADhB,EACgB,kCACd,sGACyBA,MAAMC,EAAAA,EAAAA,MAAkB,OAAjC,OAARC,EAAW,EAAH,cACaA,EAASC,OAAM,OAAxB,OAAZC,EAAe,EAAH,uBACXA,EAAaC,aAAW,2CAChC,gFAED,WAAqBC,GAAE,yFACEN,MAAMC,EAAAA,EAAAA,OAAoBK,IAAI,OAAvC,OAARJ,EAAW,EAAH,cACaA,EAASC,OAAM,OAAxB,OAAZC,EAAe,EAAH,uBACXA,EAAaG,YAAU,2CAC/B,+CAZH,6DAYG,EAXa,4SCDhB,gnGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAEA,IAAQC,EAAuDC,EAAAA,EAAAA,cAAxCC,EAAwCD,EAAAA,EAAAA,iBAAtBE,EAAsBF,EAAAA,EAAAA,kBAEzDG,GAAYC,EAAAA,EAAAA,IAAOL,EAAeE,EAAkB,CACxDI,QAAO,SAAEC,GACPA,EAASC,kBAAkBL,EAAmB,CAAEM,QAAS,MAC3D,IAsBF,QAnBoB,CACZC,IAAG,SAAEb,GAAI,iHACCO,EAAS,uCAAEM,IAAIP,EAAmBN,IAAE,0CADrC,EAEf,EACMc,OAAM,WAAI,iHACAP,EAAS,uCAAEO,OAAOR,IAAiB,0CADnC,EAEhB,EACMS,IAAG,SAAEd,GAAY,oGAChBA,EAAWD,GAAI,CAAF,gEAIJO,EAAS,uCAAEQ,IAAIT,EAAmBL,IAAU,0CALrC,EAMvB,EAAC,gBACaD,GAAI,iHACFO,EAAS,8CAASD,EAAmBN,IAAE,0CADrC,EAElB,gDClBF,QAPqB,CACnBgB,KAAM,GAAF,OAAKZ,EAAAA,EAAAA,SAAe,QACxBa,OAAQ,SAAAjB,GAAE,gBAAOI,EAAAA,EAAAA,SAAe,kBAAUJ,EAAE,EAC5CkB,aAAc,SAAAlB,GAAE,gBAAOI,EAAAA,EAAAA,SAAe,wBAAgBJ,EAAE,EACxDmB,YAAa,SAAAnB,GAAE,gBAAOI,EAAAA,EAAAA,SAAe,wBAAgBJ,EAAE,mCCEzD,QARe,CACboB,SAAU,uCACVC,WAAY,gBACZlB,cAAe,aACfE,iBAAkB,EAClBC,kBAAmB,+ECErBgB,SACGC,eAAe,QACfC,iBAAiB,SAAS,SAAAC,GACDH,SAASI,cAAc,6BAC/BC,UAAUC,OAAO,OACnC,IAEF,IAAMC,EAAM,IAAIC,EAAAA,EAAIR,SAASC,eAAe,SAE5CQ,OAAOP,iBAAiB,cAAc,WACpCK,EAAIG,YACN,IAEAD,OAAOP,iBAAiB,QAAQ,WAC9BK,EAAIG,cACJC,EAAAA,EAAAA,IACF","sources":["webpack://restaurant-apps/./src/scripts/data/data-source.js","webpack://restaurant-apps/./src/scripts/data/favorite-idb.js","webpack://restaurant-apps/./src/scripts/globals/api-endpoint.js","webpack://restaurant-apps/./src/scripts/globals/config.js","webpack://restaurant-apps/./src/scripts/index.js"],"sourcesContent":["import API_ENDPOINT from '../globals/api-endpoint'\r\n\r\nclass DataSource {\r\n  static async list () {\r\n    const response = await fetch(API_ENDPOINT.LIST)\r\n    const responseJson = await response.json()\r\n    return responseJson.restaurants\r\n  }\r\n\r\n  static async detail (id) {\r\n    const response = await fetch(API_ENDPOINT.DETAIL(id))\r\n    const responseJson = await response.json()\r\n    return responseJson.restaurant\r\n  }\r\n}\r\n\r\nexport default DataSource\r\n","import { openDB } from 'idb'\r\nimport CONFIG from '../globals/config'\r\n\r\nconst { DATABASE_NAME, DATABASE_VERSION, OBJECT_STORE_NAME } = CONFIG\r\n\r\nconst dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n  upgrade (database) {\r\n    database.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' })\r\n  }\r\n})\r\n\r\nconst FavoriteIdb = {\r\n  async get (id) {\r\n    return (await dbPromise).get(OBJECT_STORE_NAME, id)\r\n  },\r\n  async getAll () {\r\n    return (await dbPromise).getAll(OBJECT_STORE_NAME)\r\n  },\r\n  async put (restaurant) {\r\n    if (!restaurant.id) {\r\n      return\r\n    }\r\n\r\n    return (await dbPromise).put(OBJECT_STORE_NAME, restaurant)\r\n  },\r\n  async delete (id) {\r\n    return (await dbPromise).delete(OBJECT_STORE_NAME, id)\r\n  }\r\n}\r\n\r\nexport default FavoriteIdb\r\n","import CONFIG from './config'\n\nconst API_ENDPOINT = {\n  LIST: `${CONFIG.BASE_URL}list`,\n  DETAIL: id => `${CONFIG.BASE_URL}detail/${id}`,\n  SMALL_IMAGES: id => `${CONFIG.BASE_URL}images/small/${id}`,\n  SMALL_LARGE: id => `${CONFIG.BASE_URL}images/large/${id}`\n}\n\nexport default API_ENDPOINT\n","const CONFIG = {\n  BASE_URL: 'https://restaurant-api.dicoding.dev/',\n  CACHE_NAME: 'selerakita-v1',\n  DATABASE_NAME: 'selerakita',\n  DATABASE_VERSION: 1,\n  OBJECT_STORE_NAME: 'restaurants'\n}\n\nexport default CONFIG\n","import 'regenerator-runtime' /* for async await transpile */\nimport '../styles/css/main.css'\nimport swRegister from './utils/sw-register'\nimport App from './views/app'\nimport 'lazysizes'\nimport 'lazysizes/plugins/parent-fit/ls.parent-fit'\n\ndocument\n  .getElementById('menu')\n  .addEventListener('click', e => {\n    const navbarContainer = document.querySelector('.navbar .navbar-container')\n    navbarContainer.classList.toggle('open')\n  })\n\nconst app = new App(document.getElementById('main'))\n\nwindow.addEventListener('hashchange', () => {\n  app.renderPage()\n})\n\nwindow.addEventListener('load', () => {\n  app.renderPage()\n  swRegister()\n})\n\n// document\n//   .getElementById('skip-link')\n//   .addEventListener('click', e => {\n//     const target = document.getElementById('content').getClientRects()\n//     const navbar = document.querySelector('nav.navbar').getClientRects()\n\n//     window.scroll(0, target[0].y - navbar[0].height)\n//   })\n"],"names":["fetch","API_ENDPOINT","response","json","responseJson","restaurants","id","restaurant","i","DATABASE_NAME","CONFIG","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","openDB","upgrade","database","createObjectStore","keyPath","get","getAll","put","LIST","DETAIL","SMALL_IMAGES","SMALL_LARGE","BASE_URL","CACHE_NAME","document","getElementById","addEventListener","e","querySelector","classList","toggle","app","App","window","renderPage","swRegister"],"sourceRoot":""}