{"version":3,"file":"app~e4317507.bundle.js","mappings":";gKAWA,QAPe,CACb,IAAKA,EAAAA,EACL,QAASA,EAAAA,EACT,cAAeC,EAAAA,EACf,aAAcC,EAAAA,mCCoBhB,QA5BkB,CAChBC,2BAA0B,WACxB,IAAMC,EAAMC,OAAOC,SAASC,KAAKC,MAAM,GAAGC,cACpCC,EAAaC,KAAKC,aAAaR,GACrC,OAAOO,KAAKE,aAAaH,EAC3B,EAEAI,8BAA6B,WAC3B,IAAMV,EAAMC,OAAOC,SAASC,KAAKC,MAAM,GAAGC,cAC1C,OAAOE,KAAKC,aAAaR,EAC3B,EAEAQ,aAAY,SAAER,GACZ,IAAMW,EAAaX,EAAIY,MAAM,KAC7B,MAAO,CACLC,SAAUF,EAAW,IAAM,KAC3BG,GAAIH,EAAW,IAAM,KACrBI,KAAMJ,EAAW,IAAM,KAE3B,EAEAF,aAAY,SAAEH,GACZ,OAAQA,EAAWO,SAAW,IAAH,OAAOP,EAAWO,UAAa,MACvDP,EAAWQ,GAAK,OAAS,KACzBR,EAAWS,KAAO,IAAH,OAAOT,EAAWS,MAAS,GAC/C,4SCxBF,gnGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBA8CA,QA5C4B,CACpBC,KAAI,YAAuC,oHAElB,OAFjBC,EAAmB,EAAnBA,oBAAqBC,EAAU,EAAVA,WACjC,EAAKC,qBAAuBF,EAC5B,EAAKG,YAAcF,EAAU,SAEvB,EAAKG,gBAAe,0CAJqB,EAKjD,EAEMA,cAAa,WAAI,kHAGf,GAFER,EAAO,EAAKO,YAAZP,GAAE,KAENA,GAAE,qCAAU,EAAKS,mBAAmBT,GAAG,4EAClC,EAAKU,gBAAc,gCAGrB,EAAKC,eAAa,0CAPJ,EAQvB,EAEMF,mBAAkB,SAAET,GAAI,uHACHY,EAAAA,EAAAA,IAAgBZ,GAAG,OAA5B,OAAVK,EAAa,EAAH,yBACPA,GAAU,0CAFS,EAG9B,EAEAM,YAAW,WAAI,WACblB,KAAKa,qBAAqBO,UAAYC,EAAAA,EAAAA,WAEnBC,SAASC,cAAc,aAC/BC,iBAAiB,QAAO,YAAE,8FAC7BL,EAAAA,EAAAA,IAAgB,EAAKL,aAAY,OACvC,EAAKC,gBAAe,2CAExB,EAEAE,aAAY,WAAI,WACdjB,KAAKa,qBAAqBO,UAAYC,EAAAA,EAAAA,YAEnBC,SAASC,cAAc,aAC/BC,iBAAiB,QAAO,YAAE,8FAC7BL,EAAAA,EAAAA,OAAmB,EAAKL,YAAYP,IAAG,OAC7C,EAAKQ,gBAAe,2CAExB,qQC3CF,kkNAaA,QAdgB,eAChB,EADgB,GAChB,EADgB,UAAG,iFACX,kBAAmBU,UAAS,gBAC0B,OAA1DC,QAAQC,IAAI,+CAA8C,mDAKpDF,UAAUG,cAAcC,SAAS,kBAAiB,OACxDH,QAAQC,IAAI,6BAA4B,gDAExCD,QAAQC,IAAI,oCAAqC,EAAF,IAAQ,wDAT3D,+KAWC,kBAZe","sources":["webpack://restaurant-apps/./src/scripts/routes/routes.js","webpack://restaurant-apps/./src/scripts/routes/url-parser.js","webpack://restaurant-apps/./src/scripts/utils/like-button-initiator.js","webpack://restaurant-apps/./src/scripts/utils/sw-register.js"],"sourcesContent":["import Detail from '../views/pages/detail'\r\nimport Favorites from '../views/pages/favorites'\r\nimport Home from '../views/pages/home'\r\n\r\nconst routes = {\r\n  '/': Home,\r\n  '/home': Home,\r\n  '/detail/:id': Detail,\r\n  '/favorites': Favorites\r\n}\r\n\r\nexport default routes\r\n","const UrlParser = {\n  parseActiveUrlWithCombiner () {\n    const url = window.location.hash.slice(1).toLowerCase()\n    const splitedUrl = this._urlSplitter(url)\n    return this._urlCombiner(splitedUrl)\n  },\n\n  parseActiveUrlWithoutCombiner () {\n    const url = window.location.hash.slice(1).toLowerCase()\n    return this._urlSplitter(url)\n  },\n\n  _urlSplitter (url) {\n    const urlsSplits = url.split('/')\n    return {\n      resource: urlsSplits[1] || null,\n      id: urlsSplits[2] || null,\n      verb: urlsSplits[3] || null\n    }\n  },\n\n  _urlCombiner (splitedUrl) {\n    return (splitedUrl.resource ? `/${splitedUrl.resource}` : '/') +\n      (splitedUrl.id ? '/:id' : '') +\n      (splitedUrl.verb ? `/${splitedUrl.verb}` : '')\n  }\n}\n\nexport default UrlParser\n","import FavoriteIdb from '../data/favorite-idb'\r\nimport Template from '../views/templates/template'\r\n\r\nconst LikeButtonInitiator = {\r\n  async init ({ likeButtonContainer, restaurant }) {\r\n    this._likeButtonContainer = likeButtonContainer\r\n    this._restaurant = restaurant\r\n\r\n    await this._renderButton()\r\n  },\r\n\r\n  async _renderButton () {\r\n    const { id } = this._restaurant\r\n\r\n    if (id && await this._isRestaurantExist(id)) {\r\n      return this._renderLiked()\r\n    }\r\n\r\n    return this._renderLike()\r\n  },\r\n\r\n  async _isRestaurantExist (id) {\r\n    const restaurant = await FavoriteIdb.get(id)\r\n    return !!restaurant\r\n  },\r\n\r\n  _renderLike () {\r\n    this._likeButtonContainer.innerHTML = Template.favorite()\r\n\r\n    const likeButton = document.querySelector('#favorite')\r\n    likeButton.addEventListener('click', async () => {\r\n      await FavoriteIdb.put(this._restaurant)\r\n      this._renderButton()\r\n    })\r\n  },\r\n\r\n  _renderLiked () {\r\n    this._likeButtonContainer.innerHTML = Template.favorited()\r\n\r\n    const likeButton = document.querySelector('#favorite')\r\n    likeButton.addEventListener('click', async () => {\r\n      await FavoriteIdb.delete(this._restaurant.id)\r\n      this._renderButton()\r\n    })\r\n  }\r\n}\r\n\r\nexport default LikeButtonInitiator\r\n","const swRegister = async () => {\r\n  if (!('serviceWorker' in navigator)) {\r\n    console.log('Service Worker not supported in the browser')\r\n    return\r\n  }\r\n\r\n  try {\r\n    await navigator.serviceWorker.register('./sw.bundle.js')\r\n    console.log('Service worker registered')\r\n  } catch (error) {\r\n    console.log('Failed to register service worker', error)\r\n  }\r\n}\r\n\r\nexport default swRegister\r\n"],"names":["Home","Detail","Favorites","parseActiveUrlWithCombiner","url","window","location","hash","slice","toLowerCase","splitedUrl","this","_urlSplitter","_urlCombiner","parseActiveUrlWithoutCombiner","urlsSplits","split","resource","id","verb","i","init","likeButtonContainer","restaurant","_likeButtonContainer","_restaurant","_renderButton","_isRestaurantExist","_renderLiked","_renderLike","FavoriteIdb","innerHTML","Template","document","querySelector","addEventListener","navigator","console","log","serviceWorker","register"],"sourceRoot":""}